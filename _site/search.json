[
  
    {
      "title"    : "Thoughts on Code Reviews",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/thoughts-on-code-reviews'>Thoughts on Code Reviews<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-10-22T21:12:35+11:00'>22 October 2021</time> – <span class='article__minutes'>6min read</span> </div><p class='article__excerpt'>Fundamental flaws feedback, compassionate code review and other thoughts that help me when doing code reviews</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/code reviews' class='article__tag'>code reviews</a><a href='/tag/software development' class='article__tag'>software development</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "code reviews and software development",
      "url"      : "/posts/thoughts-on-code-reviews",
      "date"     : "2021-10-22 21:12:35 +1100",
      "content"  : "When reviewing code, I used to think it had to be something I 100% agree with.  I thought I was doing right, making sure any code that gets merged is as good as it can be. Looking back, acting as a custodian of the codebase, I was walking the line between that and gatekeeping. Back then, I was all about code consistency and maintainability, and I thought frustrating code review experiences were a trade-off to ensure a consistent codebase. Don’t get me wrong. Code consistency and maintainability are essential. But focusing too much on the current way we’re doing things, we might miss out on improving things for the better.“Not the best choice” versus fundamental flaws feedbackNew ideas or new ways of doing things are introduced in a code base and communicated via code review. Regardless of whether or not this is a good way to introduce changes (especially when working as a team), it happens often as we all aim to make code better. When trying to find the balance between maintaining consistency using existing patterns vs. exploring new ideas, I go back to this line from this article: Is this change something I can live with?  Is this change something I can live with?“Not the best choice” versus fundamental flaws feedback helps me figure out how much value I put in the changes I want to be done. Not the best choice means I can think of a better solution, but what’s currently there is acceptable. The fundamental flaws feedback is where the current solution is unacceptable and being able to mention why concretely. There will always be different ways to solve one problem. The critical thing to keep in mind is that the solution doesn’t always have to be how I thought.Compassionate Code Review CommentsWhen it comes to actual code review comments, this presentation on compassionate code reviews is my go-to for more practical tips. It talks about three filters to use to check.  Is it True?          if it’s a fact (mention the source/additional documentation),  if it’s opinion or a preference (say so explicitly), try a question and avoid “shoulds” or “right/wrong” language        Is it Necessary?          be aware of nitpicks, and check does it have to be addressed by this pull request        Is it Kind?          assume competence and seek to understand and remember you’re dealing with a human with emotions      One of the more valuable tips is trying a question instead of telling the author what to do. A question can come in many forms. I initially took this advice and added, “can you do/change ___ ?”. I was still telling the author what I wanted to be achieved and masked it with a question. And so sometimes I try to ask “what do you think of __ ?”. This way we can have a discussion first, maybe they’ve thought about it tried it out and it didn’t work or maybe this suggestion has inspired them and we can work on the solution together.Over time, instead of making the author change their code, I moved to ask why the code was that way. From the answer I get, I could get more context as to their thinking and the requirement. Getting more context by asking why first has helped me weigh whether the changes I want to be done fit the problem being solved.As part of dealing with humans with emotions, I’d also try to look for positive things or things I found to be good and make sure to let the author know by giving praise or a thumbs-up emoji. It might be considered noise by other people, but positive and negative feedback will help ensure good practices are communicated and maintained.Give more contextAfter figuring out what sort of code changes I think can make the code better, I try and sort out the reasoning why. When asking someone to change their current approach (something that works and is probably tested), I find it helps the suggestion whenever I give more context. The reasoning can give insight into my thought process and double-check my assumptions with my code review comment. If my goal is to teach a pattern or a principle, providing the reason also makes it easier for them to remember and adapt in the future.Lastly, after explaining why, I also try and think if a code snippet or an example would help lessen misunderstanding. It provides something concrete that can be easily discussed. Sometimes describing changes or pseudocode can lead to assumptions being made and more back and forth if those assumptions aren’t aligned. I also hope it shows that I (as a reviewer) have also made an effort to figure out if my suggestion would work with the current code being reviewed.It might seem a lot of work to do all these when talking about code. (It’s something that I try to be mindful of, and I don’t always get it done) However, code reviews aren’t like coding (where we’re communicating with a computer, and it’s primarily black or white or right or wrong). Code reviews communicate with a human (with emotions and ego) and deal with shades of gray. The outcome or the code changes might be the same, but the experience or how you get there with the discussion will be different. Over time, a collection of less frustrating code reviews is better for the people working on the same codebase.What I Read (or Watched)  Compassionate Yet Candid Code Reviews by April Wensel          25 minute video on the 3 filters to ask for compassionate code reviews        How to Do Code Reviews Like a Human (Part Two          Provides a familiar example of a bad code review      Offers up tips like bringing code up by a letter grade (from C to B), respect the scope of the review        Babylon Health Etiquette on Code reviews          Has good bullet points for everyone, for code reviewers and code authors        Code Review Guidelines for Humans by Philipp Hauer          Bit of a longer read, but it does provide good explanations for the different points made. It also has examples      There’s also a “cheat sheet” similar to Babylon health’s bullet points at the bottom of the article        Google Engineering Practices          The standard of code review                  Goal of new code is to improve the overall health of the codebase, code being reviewed doesn’t have to be perfect                    How to write code review comments      Handling pushback in code reviews      (Hello, I would be really grateful to get some comments/suggestions/feedback about this post. You can email me at hello@aci.codes or find me on Twitter @acicartagena)"
    } ,
  
    {
      "title"    : "Hello World",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/hello-world'>Hello World<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-08-16T20:12:35+10:00'>16 August 2021</time> – <span class='article__minutes'>3min read</span> </div><p class='article__excerpt'>TLDR Reasons why I started a blog and what I&#39;m hoping to get out of it</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/hello' class='article__tag'>hello</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "hello",
      "url"      : "/posts/hello-world",
      "date"     : "2021-08-16 20:12:35 +1000",
      "content"  : "TLDR:  my goals for this blog:          keep track and share coding thoughts, ideas and learnings      improve technical writing skills        posts would be shitty first (and second) drafts that will be improved/iterated on  feedback is encouraged (email: hello@aci.codes)Blog goalsI like coding/programming/software development/software engineering (I’m not sure what you want to call it). I think I’m good at it, and I can always do better by learning. I have some thoughts on software development. And probably have written some of them down somewhere (Twitter or a company’s confluence page). The goal of this blog is to have a space for me to keep track of those thoughts/ ideas/learnings/references. Writing things down also helps me remember them more. This blog is mainly for me to remember what I learned and maybe something to look back on from time to time.As a software developer, my day-to-day isn’t just about coding. One big part of software development is communicating, not just with the computer but with people too. Similar to what I think to most developers, I do struggle with it. I find it hard dealing with the blank page and starting a document. Maybe by practicing writing my thoughts down, I would be more comfortable and less likely to procrastinate documentation. And maybe with more practice (and hopefully feedback from other people), I can improve my technical writing skills.Shitty first draftI struggle with looking at a blank page and not knowing how to start things. In the same way, I want to create good quality code. I expect a certain level of quality in my posts. But, I do know I can’t be great at the start, especially with blogging. And so, the way I will approach this is with the idea of a shitty first draft. Similar to coding, where we iterate on code and make it better as we know more. The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.  The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.Blog tech stackThis blog is generated using Jekyll and is stored in this repository.  I like that writing posts would have the same workflow as coding, where I can continue to update/improve blog posts as commits. The underlying architecture of the blog (having it hosted in git) has ease of iteration/improvement as one of its main features. Using git also allows to keep a history of the post, and diffs can be available of the past revisions.(I don’t know much about web development, and so if there are issues in the blog feel free to reach out and let me know)FeedbackDuring my student days, English (especially grammar) was my worst subject.   I tend to ramble a lot in writing and have trouble with rules on tenses and punctuation. When it comes to code, there’s the compiler that tells me whenever I broke some of them. When it comes to writing, I would probably read them and have a sense of whether it feels right or not. (Probably not the best way) English language aside, there’s also a lot of room for improvement in technical writing. Have I achieved my goal of communicating my ideas in a way that’s easily understood?In saying that, it would be great and a massive favor if I can get some feedback on my posts. I’m still trying to figure out if I want a comment section. So, for now, feel free to email me at: hello@aci.codes or send me a message on Twitter.I don’t know how to end this post (this can be your first point of feedback) and so see you later on my next post, I guess :)"
    } 
  
]
