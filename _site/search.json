[
  
    {
      "title"    : "Compassionate Code Reviews",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/compassionate-code-reviews'>Compassionate Code Reviews<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-08-18T00:24:53+10:00'>18 August 2021</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>TLDR - On PRs ask is it true? is it honest? is it kind?. Provide as much context as possible</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/code reviews' class='article__tag'>code reviews</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "code reviews",
      "url"      : "/posts/compassionate-code-reviews",
      "date"     : "2021-08-18 00:24:53 +1000",
      "content"  : "TLDR:  compassionate code review  author PR guide  reviewer PR guideNotesCompassionate code reviewsIs it true  fact vs opinion  avoid this is right/wrong language  try question  avoid shouldIs it necessary  be careful with nitpicks  check motivesIs it kind  assume competence, seek to understand  you’re dealing with a human  choose the right mediumGoogle standard of code reviewThe primary purpose of code review is to make sure that the overall code health of Google’s code base is improving over time.First, developers must be able to make progress on their tasks. If you never submit an improvement to the codebase, then the codebase never improves. Also, if a reviewer makes it very difficult for any change to go in, then developers are disincentivized to make improvements in the future.reviewer has ownership and responsibility over the code they are reviewing. They want to ensure that the codebase stays consistent, maintainableIn general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn’t perfect.the reviewer should balance out the need to make forward progress compared to the importance of the changes they are suggesting. Instead of seeking perfection, what a reviewer should seek is continuous improvement.Google review commentsOne way to do this is to be sure that you are always making comments about the code and never making comments about the developer.Explain WHYsometimes it’s appropriate to give a bit more explanation around your intent, the best practice you’re following, or how your suggestion improves code health.Google handling pushback in code reviewsWhen a developer disagrees with your suggestion, first take a moment to consider if they are correct. Often, they are closer to the code than you are, and so they might really have a better insight about certain aspects of it.In particular, when the reviewer believes their suggestion will improve code health, they should continue to advocate for the change, if they believe the resulting code quality improvement justifies the additional work requested. Improving code health tends to happen in small steps.Cleaning It Up Laterit is usually best to insist that the developer clean up their CL now, before the code is in the codebase and “done.” Letting people “clean things up later” is a common way for codebases to degenerate.If the CL exposes surrounding problems and they can’t be addressed right now, the developer should file a bug for the cleanup and assign it to themselves so that it doesn’t get lost. They can optionally also write a TODO comment in the code that references the filed bug.References:  Compassionate Yet Candid Code Reviews by April Wensel  Google          The standard of code review      How to write code review comments      Handling pushback in code reviews        https://www.michaelagreiler.com/respectful-constructive-code-review-feedback/  https://phauer.com/2018/code-review-guidelines/      https://dev.to/mateusz_janusz/how-to-do-code-reviews-and-keep-a-positive-relationship-with-your-colleagues-2161    https://mtlynch.io/human-code-reviews-1/  https://mtlynch.io/human-code-reviews-2/"
    } ,
  
    {
      "title"    : "Learning Kotlin from a Swift Developer POV",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/learning-kotlin'>Learning Kotlin from a Swift Developer POV<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-08-17T19:17:01+10:00'>17 August 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>TLDR Kotlin is both very similar and at the same time different from Swift. WIP</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/kotlin' class='article__tag'>kotlin</a><a href='/tag/swift' class='article__tag'>swift</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "kotlin and swift",
      "url"      : "/posts/learning-kotlin",
      "date"     : "2021-08-17 19:17:01 +1000",
      "content"  : "TLDR:  How I start learning Kotlin  Kotlin and Swift similarities and differences"
    } ,
  
    {
      "title"    : "Hello World",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/hello-world'>Hello World<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-08-16T20:12:35+10:00'>16 August 2021</time> – <span class='article__minutes'>3min read</span> </div><p class='article__excerpt'>TLDR Reasons why I started a blog and what I&#39;m hoping to get out of it</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/hello' class='article__tag'>hello</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "hello",
      "url"      : "/posts/hello-world",
      "date"     : "2021-08-16 20:12:35 +1000",
      "content"  : "TLDR:  my goals for this blog:          keep track and share coding thoughts, ideas and learnings      improve technical writing skills        posts would be shitty first (and second) drafts that will be improved/iterated on  feedback is encouraged (email: hello@aci.codes)Blog goalsI like coding/programming/software development/software engineering (I’m not sure what you want to call it). I think I’m good at it, and I can always do better by learning. I have some thoughts on software development. And probably have written some of them down somewhere (Twitter or a company’s confluence page). The goal of this blog is to have a space for me to keep track of those thoughts/ ideas/learnings/references. Writing things down also helps me remember them more. This blog is mainly for me to remember what I learned and maybe something to look back on from time to time.As a software developer, my day-to-day isn’t just about coding. One big part of software development is communicating, not just with the computer but with people too. Similar to what I think to most developers, I do struggle with it. I find it hard dealing with the blank page and starting a document. Maybe by practicing writing my thoughts down, I would be more comfortable and less likely to procrastinate documentation. And maybe with more practice (and hopefully feedback from other people), I can improve my technical writing skills.Shitty first draftI struggle with looking at a blank page and not knowing how to start things. In the same way, I want to create good quality code. I expect a certain level of quality in my posts. But, I do know I can’t be great at the start, especially with blogging. And so, the way I will approach this is with the idea of a shitty first draft. Similar to coding, where we iterate on code and make it better as we know more. The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.  The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.Blog tech stackThis blog is generated using Jekyll and is stored in this repository.  I like that writing posts would have the same workflow as coding, where I can continue to update/improve blog posts as commits. The underlying architecture of the blog (having it hosted in git) has ease of iteration/improvement as one of its main features. Using git also allows to keep a history of the post, and diffs can be available of the past revisions.(I don’t know much about web development, and so if there are issues in the blog feel free to reach out and let me know)FeedbackDuring my student days, English (especially grammar) was my worst subject.   I tend to ramble a lot in writing and have trouble with rules on tenses and punctuation. When it comes to code, there’s the compiler that tells me whenever I broke some of them. When it comes to writing, I would probably read them and have a sense of whether it feels right or not. (Probably not the best way) English language aside, there’s also a lot of room for improvement in technical writing. Have I achieved my goal of communicating my ideas in a way that’s easily understood?In saying that, it would be great and a massive favor if I can get some feedback on my posts. I’m still trying to figure out if I want a comment section. So, for now, feel free to email me at: hello@aci.codes or send me a message on Twitter.I don’t know how to end this post (this can be your first point of feedback) and so see you later on my next post, I guess :)"
    } 
  
]
