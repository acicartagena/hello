[
  
    {
      "title"    : "PR Metrics",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/pr-metrics'>PR Metrics<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-04-05T01:12:35+10:00'>05 April 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Quick glance on details and metrics on your Github PRs</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/code reviews' class='article__tag'>code reviews</a><a href='/tag/prmetrics' class='article__tag'>prmetrics</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "code reviews and prmetrics",
      "url"      : "/posts/pr-metrics",
      "date"     : "2022-04-05 01:12:35 +1000",
      "content"  : "View detailed (but anonymous) Github Pull Request Metrics. The app anonymises the contributors of the repo to lessen the bias when viewing the data.Be able to see the time it takes from publishing a Pull Request to the first review comment. Measure the time in between the last commit and when the Pull Request is approved. Have a quick overview of the time in between approving a Pull Request to when it gets merged.PR Metrics offers a quick glance into your Github repositories pull requests.Scroll through the list of Pull Requests or be able to switch between different charts and tap to be able to see interesting points.Feedback(If you have questions, concerns, issues, or feature suggestions, you can email me at hello@aci.codes)v1.0  Shows repositories you have submitted a Pull Request or reviewed a Pull Request  Currently only getting the last 50 commits, 10 reviews and 5 opinionated reviews for a given Pull Request  Asks for repo scope on Github OAuth to be able to read your repository pull request informationHistoryWhat started off as me exploring GithubAPIs to be able to graph the data into Google Sheets became an app."
    } ,
  
    {
      "title"    : "Hello Kotlin, from a Swift Developer",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/hello-kotlin'>Hello Kotlin, from a Swift Developer<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-12-10T11:12:35+11:00'>10 December 2021</time> – <span class='article__minutes'>23min read</span> </div><p class='article__excerpt'>Notes from Head First Kotlin</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/kotlin' class='article__tag'>kotlin</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "kotlin",
      "url"      : "/posts/hello-kotlin",
      "date"     : "2021-12-10 11:12:35 +1100",
      "content"  : "KotlinThis is more of a reference style notes similar to learnxiny.com. The formatting is not nice since I wrote this in Notion and copied it here as well. It’s cool to see the similarities between Swift and Kotlin.ClassConstructor / InitA constructor runs when you instantiate an object. It’s used to define properties and initialize them// 1. properties in constructor is initialised firstclass Dog(val name_param: String, var weight_param: Int, val breed_param: String) { // properties in main body    val name = name_param    val weight = weight_param    val breed = breed_param    lateinit var temperament: String    // extra code need to run, more complex property initializer    init {        // 2. this init code runs after constructor    }    // 3. created after 2.    var activities = arrayOf("walks")     init {        // 3. can have another init to run after 3    }}Defining properties in the main body:  flexibility  no need initialize with a parameter valueinitialize properties before you use themlateinit → lazy (can’t initialize from constructor)  needs to be var  can’t use: Byte, Short, Int, Long, Double, Float, Char, or Booleanempty constructor - compiler writes one for youclass Duck() { }var duck = Duck()Propertiescustom getter/settersval weightInKgs = Double get() = weight/2.2 //gettter - no parameter function // setter - runs each time you try to set the value set(value) {  if (value&gt;0) field = value // if value&lt;0 value won't be set }/* ---------------------------------------------------------------------- */var myProperty: String// compiler secretly adds the ff:var myProperty: String    get() = field    set(value) {        field = value  }// data hiding - always calls getter &amp; setter when using dot operatorfield  property’s backing field  reference to underlying value of property  use in getter &amp; setter methods          stop getting stuck in an endless loop      InheritanceDon’t use inheritance if the IS-A test fails (just so you can reuse code)open  prefix explicitly tell compiler class can be used as a superclass  prefix on properties that can be overridenopen class Animal(type: String) { open val image = "" val food = ""  open fun makeNoise() { ... } // final stops override final fun sleep() { ... }}class Hippo(type: String): Animal(type) { override val image = "hippo.jpg" override fun makeNoise() { ... }}  subclass must call superclass primary constructor in header  override val in superclass with var in subclass  override a property’s type with its superclassAbstract classes  prevents class from being instantiated  can contain abstract &amp; non-abstract properties and functions  make properties abstract so they  need to be overriden  abstract properties &amp; functions → common protocol (polymorphism)  first concrete class below abstract superclass must implement all abstract properties &amp; functionsInterface  protocol for common behaviour  benefit from polymorphism without inheritance  can add concrete functions to interfaces (provide a function body)  properties can’t store state          don’t have backing fields        class can inherit from a single direct superclass, but can have multiple interfaces  override interface methods &amp; properties in concrete classWhen to use which  class - new class doesn’t pass the IS-A test for any other type.  subclass - make a more specific version of a class and need to override or add new behaviors.  abstract class - template for a group of subclasses. Guarantee that nobody can make objects of that type.  interface - define common behavior, or a role that other classes can play, regardless of where these classes are in the inheritance tree.Any  mother of all classes  ensures every class inherits the same behaviour          equals(any: Any): Boolean      hashCode(): Int      toString(): String        can use polymorphism with any objectdata class  swift struct  object equality based on values of each object’s properties          equal object has same hashCode      toString value of each property        ===          reference to the same object        best practice use val properties          can use var but not recommended        can’t be abstract or open  only include properties in primary constructor          compiler generated equality &amp; copy      data class Recipe(val title: String,                    val mainIngredient: String,                    val difficulty: String = "Easy") { //default parameter values//secondary constructor constructor(is_my_specialty: Boolean): this("Aglio Olio", "Prawn") {  //code runs when secondary constructor is called }}// pass values in declarationval r = Recipe("Spaghetti", "Beef")// named argumentsval r2 = Recipe(title = "Spaghetti",                 mainIngredient = "Beef",                difficulty = "Medium")Enum classes  create a set of values that represent the only valid values for a variable  each value defined by the enum class is an instance of that class  each value defined in an enum class can override the properties and functions it inherits from the class definition// instrument is a property each BandMember hasenum class BandMember(val instrument: String) { JERRY("lead guitar") {  override fun sings() = "plaintively" }, BOBBY("rhythm guitar") {  override fun sings() = "hoarsely" }, PHIL("base"); open fun sings() = "occasionally"}var selectedBandMember = BandMember.JERRYprintln(selectedBandMember.instrument)println(selectedBandMember.sings())Sealed class  restrict your class hierarchy to a specific set of subtypes  sealed  similar to swift enum with associated value  sealed class lets you create multiple instances of each subtypesealed class MessageTypeclass MessageSuccess(var msg: String): MessageType()class MessageFailure(var msg: String, var e: Exception): MessageType()fun main(args: Array&lt;String&gt;) {    val messageSuccess = MessageSuccess("Yay!")    val messageSuccess2 = MessageSuccess("It worked!")    val messageFailure = MessageFailure("Boo!", Exception("Gone wrong."))    var myMessage: MessageType = messageFailure}Nested and inner class  Nested          class that’s defined inside another class      can’t access a nested class from an instance of the outer class without first creating a property of that type inside the outer class                  val nested = Outer().Nested() //won’t compile                    class doesn’t have access to an instance of the outer class        inner          access properties &amp; functions defined by its outer class      an access an inner class by creating an instance of the outer class, and then using this to create an instance of the inner class      class Outer {    val x = "x in outer class"    val myInner = Inner()    class Nested {        val y = "y in the nested class"        fun myFun() = "this is nested function"        //fun getX() = "value of x is $x" //this line won't compile    }    inner class Inner {        val y = "y in the nested class"        fun myFun() = "this is nested function"        fun getX() = "value of x is $x"    }}val nested = Outer.Nested()val inner = Outer().Inner()Singleton  object          only a single instance of a given type can be created      Add an object declaration to a class to create a single instance of that type which belongs to the class        companion          A companion object is like a class object, except that you can omit the object’s name      Any functions you add to a companion object are shared by all class instances      object DuckManager {    fun herdDucks() { }}DuckManager.herdDucks()class Duck {    object DuckFactory {         fun create(): Duck = Duck()     }     companion object {        fun create(): Duck = Duck()     }}val duckFromFactory = Duck.DuckFactory.create()val duckCompanion = Duck.create()val duckCompanion2 = Duck.Companion.create()Object expression  object  similar to Swift tuple  anonymous object with no predefined typeval startingPoint = object {    val x = 0    val y = 0}println("starting point is ${startingPoint.x}, ${startingPoint.y}")is  check for typesval animal: Animal = Wolf()if (animal is Wolf) { animal.doWolfThings()}as  explicit cast  both hold reference to same object (but knowledge of what it is might be different)var wolf = r as Wolfwolf.doWolfThings()when  Swift Switch statementwhen (x) { 0 -&gt; println("x is 0") 1,2 -&gt; println("x is 1,2") else -&gt; {  println("x is others") }}Nullability  similar to swift  ?. (safe call operator)          can be chained        ?.let          similar to if let (swift)      allows you to run code for a value that’s not null      use {} (curly braces) for the body        ?: (Elvis operator)          if value is not null return value, else return value on the right        !! (not-null assertion operator)          throws NullPointerException      var w: Wolf? = Wolf()// safe call operatorw?.doWolfThings()// if let equivalentw?.let { println(it.hunger)}// elvisw?.hunger ?: -1Try Catch Finallytry { turnOvenOn() x.bake()} catch (e: BakingException) { println("baking experiment failed")} finally { turnOvenOff()}Exception  Every exception is of type: Exception  throw use to throw an exception          type Nothing      val h = w?.hunger ?: throw AnimalException()CollectionsArray  can’t change size  val numbers = arrayOf(1,2,3)  can be updatedList  When sequence matters  Iterable  (Might be similar to array swift?)  Allows duplicate valuesval shopping = listOf("Tea", "Eggs", "Milk")// iteratefor (item in shopping) println(item)// check existenceif (shopping.contains("Milk")) {    println(shopping.indexOf("Milk"))}val updateableList = mutableListOf("Tea")updateableList.add("Bread")if (updateableList.contains("Bread")) {   updateableList.remove("Bread")}val toAdd = listOf("Cookies", "Sugar")updateableList.addAll(toAdd)val toRemove = listOf("Milk", "Sugar")updateableList.removeAll(toRemove)Set  When uniqueness matters  Iterable  Steps for determining uniqueness          Gets the object’s hash code and uses that to compare with other objects in the set                  hash code as “bucket”          matching hash codes go to step 2                    === operator to compare the new value against any objects it contains with the same hash code (bucket)      == operator to compare the new value against any objects it contains with matching hash codes        Same value          same object      equal to a value it already contains      val friendSet = setOf("Jim", "Sue", "Sue", "Nick", "Nick")val mFriendSet = mutableSetOf("Jim", "Sue")mFriendSet.add("Nick")mFriendSet.remove("Nick")Map  Key value pair  NOT iterable!  Similar to dictionary in swiftval ri = Recipe("Chicken soup")val r2 = Recipe("Thai Curry")val recipeMap: Map&lt;String, Recipe&gt; = mapOf("recipe1" to r1, "recipe2" to r2)recipeMap.containsKey("recipe1")recipeMap.containsValue(r1)if (recipeMap.containsKey("recipe1") { val recipeMap.getValue("recipe1")}for ((key, value) in recipeMap) {     println("Key is $key, value is $value")}val mRecipeMap = mutableMapOf("recipe1" to r1, "recipe2" to r2)val r4 = Recipe("Jambalaya")val r5 = Recipe("Sausage Rolls")val recipesToAdd = mapOf("Recipe4" to r4, "Recipe5" to r5)mRecipeMap.putAll(recipesToAdd)mRecipeMap.valuesmRecipeMap.keysGenerics  similar definition in swift?          val x: MutableList&lt; String&gt;        Compiler can infer generic typeinterface MutableList&lt;E&gt; : List&lt;E&gt;, MutableCollection&lt;E&gt; { }abstract class Pet(var name: String)class Cat(name: String): Pet(name)class Dog(name: String): Pet(name)class Fish(name: String): Pet(name)class Contest&lt;T: Pet&gt; { }fun &lt;T: Pet&gt; listPet...// to call function, specify typeval catList = listPet&lt;Cat&gt;(Cat("Zazzles"))// can define multiple generic typesclass MyMap&lt;K, V&gt; { }  A Retailer variable will only accept a Retailer object          val petRetailer: Retailer = CatRetailer() //this wont' compile      out (covariant)  generic subtype object in a place of a generic supertype  generic type is covariant          can use a subtype in place of a supertype.        can’t use if the class has function parameters or var properties of that generic type.  used for collectionsinterface Retailer&lt;T&gt; { fun sell(): T}// val petRetailer: Retailer&lt;Pet&gt; = CatRetailer() //this wont' compileinterface Retailer&lt;out T&gt; { .. } val petRetailer: Retailer&lt;Pet&gt; = CatRetailer()in (contravariant)  lets you use a generic supertype in place of a subtype  can use a supertype in place of a subtype. This is the opposite of covariance.  can’t use if class functions use it as a return type, or if that type is used by any properties, irrespective of whether they’re defined using val or varclass Vet&lt;in T: Pet&gt; { fun treat(t: T) { }}val catContest = Contest&lt;Cat&gt;(Vet&lt;Pet&gt;())// can be defined locallyclass Vet&lt;T: Pet&gt; { fun treat(t: T) { }}class Contest&lt;T: Pet&gt;(var vet: Vet&lt;in T&gt;) { }invariant  generic type has no in or out prefix  can only accept references of that specific tyLambdas  type of object that holds a block of code          (parameters) -&gt; return_type        { x: Int, y: Int → x + y }  →          separate parameters from the body        invoke          call lambda        it          lambda with 1 parameter that the compiler can infer        Unit          similar to return Void (in swift)      lambda has no return value                  () → Unit                    val addInts = { x: Int, y: Int -&gt; x + y }val result = addInts.invoke(6, 7)val result2 = addInts(6, 7)val greeting: () -&gt; String = { "Hello!" }val addFive: (Int) -&gt; Int = { it + 5 }  Higher order function          uses a lambda as a parameter or return value      can move the lambda outside ()                  similar to swift                    function can return a lambda      typealias  provide different name for an existing type          typealias DoubleConversion = (Double) → Double      typealias DuckArray = Array      higher order functions  filter  minBy  maxBy          If you call minBy or maxBy on a collection that contains no items, the function will return a null value.        map          returns a List and not Map        forEach          similar to for loop      arrays, Lists, Sets, and on a Map’s entries, keys and values properties.                  Not Map                    has no return value        groupBy          group your items in a collection according to some criteria      doesn’t work on Map      returns a Map with a List as the value                  Map&lt;String, List&gt;                      fold          similar to reduce      specify an initial value, and perform some operation on it for each item in a collection      doesn’t work on Map      default left to right                  use foldRight                      reduce          similar to fold but no need to specify initial value      default left to right                  use reduceRight                      can chain higher order functionsCoroutines  write code that runs asynchronously  coroutine          like a lightweight thread      run on a shared pool of threads      same thread can run many coroutines        launching is like starting a separate thread of execution, or thread  run on a shared pool of threads by default, and the same thread can run many coroutines  GlobalScope.launch          separate coroutine in the background by enclosing the code              kotlinx.coroutines library        fun main() { GlobalScope.launch { playBeats("x-x-x-") } playBeats("x----x----")}                      runBlocking          code to run in the same thread but in separate coroutines      blocks the current thread until the code that’s passed to it finishes running      blocks the current thread        launch          launch a new coroutine      launch a coroutine that runs in the same thread      use the same scope as runBlocking      fun main() { runBlocking {  launch { playBeats("x-x-x-") }  playBeats("x----x----") }}  delay          pauses the current coroutine      allows other code to run      similar to Thread.sleep        suspend                  call a suspendable function (such as delay) from another function, that function must be marked with suspend        suspend fun playBeats(beats: String) {  delay(..)}                    TestJUnit  Each test is held in a function, prefixed with the annotation @Test  assertEquals  use back ticks for function names          wrap function names in back-ticks (`)      fun should be able to add 3()      KotlinTest  String Specification—or StringSpec  use rows to test your code against entire sets of data"should be able to add 3 and 4 and it musn't go wrong" { val totaller = Totaller() totaller.add(3) should be 7}Package and import  Package          organize your code      prevents name conflicts      Each source file can only have one package declaration        import          can refer to the class without typing the fully qualified name each time      Visibility Modifiers  public          visible everywhere      default behaviour        private          visible to code inside its source file        internal          visible inside the same module, but invisible elsewhere      module - set of Kotlin files that are compiled together        protected          applied to properties, functions &amp; other members      Makes the member visible inside the class, and any of its subclasses.      Extensions  add new functions and properties to an existing type without you having to create a whole new subtype.// add function to Doublefun Double.toDollar(): String { return "$$this"}let dbl = 42.25println(dbl.toDollar())// add property to Stringval String.halfLength get() = length/2.0val test = "This is a test"println(test.halfLength)"
    } ,
  
    {
      "title"    : "Thoughts on Code Reviews",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/thoughts-on-code-reviews'>Thoughts on Code Reviews<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-10-22T21:12:35+11:00'>22 October 2021</time> – <span class='article__minutes'>6min read</span> </div><p class='article__excerpt'>Fundamental flaws feedback, compassionate code review and other thoughts that help me when doing code reviews</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/code reviews' class='article__tag'>code reviews</a><a href='/tag/software development' class='article__tag'>software development</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "code reviews and software development",
      "url"      : "/posts/thoughts-on-code-reviews",
      "date"     : "2021-10-22 21:12:35 +1100",
      "content"  : "When reviewing code, I used to think it had to be something I 100% agree with.  I thought I was doing right, making sure any code that gets merged is as good as it can be. Looking back, acting as a custodian of the codebase, I was walking the line between that and gatekeeping. Back then, I was all about code consistency and maintainability, and I thought frustrating code review experiences were a trade-off to ensure a consistent codebase. Don’t get me wrong. Code consistency and maintainability are essential. But focusing too much on the current way we’re doing things, we might miss out on improving things for the better.“Not the best choice” versus fundamental flaws feedbackNew ideas or new ways of doing things are introduced in a code base and communicated via code review. Regardless of whether or not this is a good way to introduce changes (especially when working as a team), it happens often as we all aim to make code better. When trying to find the balance between maintaining consistency using existing patterns vs. exploring new ideas, I go back to this line from this article: Is this change something I can live with?  Is this change something I can live with?“Not the best choice” versus fundamental flaws feedback helps me figure out how much value I put in the changes I want to be done. Not the best choice means I can think of a better solution, but what’s currently there is acceptable. The fundamental flaws feedback is where the current solution is unacceptable and being able to mention why concretely. There will always be different ways to solve one problem. The critical thing to keep in mind is that the solution doesn’t always have to be how I thought.Compassionate Code Review CommentsWhen it comes to actual code review comments, this presentation on compassionate code reviews is my go-to for more practical tips. It talks about three filters to use to check.  Is it True?          if it’s a fact (mention the source/additional documentation),  if it’s opinion or a preference (say so explicitly), try a question and avoid “shoulds” or “right/wrong” language        Is it Necessary?          be aware of nitpicks, and check does it have to be addressed by this pull request        Is it Kind?          assume competence and seek to understand and remember you’re dealing with a human with emotions      One of the more valuable tips is trying a question instead of telling the author what to do. A question can come in many forms. I initially took this advice and added, “can you do/change ___ ?”. I was still telling the author what I wanted to be achieved and masked it with a question. And so sometimes I try to ask “what do you think of __ ?”. This way we can have a discussion first, maybe they’ve thought about it tried it out and it didn’t work or maybe this suggestion has inspired them and we can work on the solution together.Over time, instead of making the author change their code, I moved to ask why the code was that way. From the answer I get, I could get more context as to their thinking and the requirement. Getting more context by asking why first has helped me weigh whether the changes I want to be done fit the problem being solved.As part of dealing with humans with emotions, I’d also try to look for positive things or things I found to be good and make sure to let the author know by giving praise or a thumbs-up emoji. It might be considered noise by other people, but positive and negative feedback will help ensure good practices are communicated and maintained.Give more contextAfter figuring out what sort of code changes I think can make the code better, I try and sort out the reasoning why. When asking someone to change their current approach (something that works and is probably tested), I find it helps the suggestion whenever I give more context. The reasoning can give insight into my thought process and double-check my assumptions with my code review comment. If my goal is to teach a pattern or a principle, providing the reason also makes it easier for them to remember and adapt in the future.Lastly, after explaining why, I also try and think if a code snippet or an example would help lessen misunderstanding. It provides something concrete that can be easily discussed. Sometimes describing changes or pseudocode can lead to assumptions being made and more back and forth if those assumptions aren’t aligned. I also hope it shows that I (as a reviewer) have also made an effort to figure out if my suggestion would work with the current code being reviewed.It might seem a lot of work to do all these when talking about code. (It’s something that I try to be mindful of, and I don’t always get it done) However, code reviews aren’t like coding (where we’re communicating with a computer, and it’s primarily black or white or right or wrong). Code reviews communicate with a human (with emotions and ego) and deal with shades of gray. The outcome or the code changes might be the same, but the experience or how you get there with the discussion will be different. Over time, a collection of less frustrating code reviews is better for the people working on the same codebase.What I Read (or Watched)  Compassionate Yet Candid Code Reviews by April Wensel          25 minute video on the 3 filters to ask for compassionate code reviews        How to Do Code Reviews Like a Human (Part Two          Provides a familiar example of a bad code review      Offers up tips like bringing code up by a letter grade (from C to B), respect the scope of the review        Babylon Health Etiquette on Code reviews          Has good bullet points for everyone, for code reviewers and code authors        Code Review Guidelines for Humans by Philipp Hauer          Bit of a longer read, but it does provide good explanations for the different points made. It also has examples      There’s also a “cheat sheet” similar to Babylon health’s bullet points at the bottom of the article        Google Engineering Practices          The standard of code review                  Goal of new code is to improve the overall health of the codebase, code being reviewed doesn’t have to be perfect                    How to write code review comments      Handling pushback in code reviews      (Hello, I would be really grateful to get some comments/suggestions/feedback about this post. You can email me at hello@aci.codes or find me on Twitter @acicartagena)"
    } ,
  
    {
      "title"    : "Hello World",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/posts/hello-world'>Hello World<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-08-16T20:12:35+10:00'>16 August 2021</time> – <span class='article__minutes'>3min read</span> </div><p class='article__excerpt'>TLDR Reasons why I started a blog and what I&#39;m hoping to get out of it</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/hello' class='article__tag'>hello</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "hello",
      "url"      : "/posts/hello-world",
      "date"     : "2021-08-16 20:12:35 +1000",
      "content"  : "TLDR:  my goals for this blog:          keep track and share coding thoughts, ideas and learnings      improve technical writing skills        posts would be shitty first (and second) drafts that will be improved/iterated on  feedback is encouraged (email: hello@aci.codes)Blog goalsI like coding/programming/software development/software engineering (I’m not sure what you want to call it). I think I’m good at it, and I can always do better by learning. I have some thoughts on software development. And probably have written some of them down somewhere (Twitter or a company’s confluence page). The goal of this blog is to have a space for me to keep track of those thoughts/ ideas/learnings/references. Writing things down also helps me remember them more. This blog is mainly for me to remember what I learned and maybe something to look back on from time to time.As a software developer, my day-to-day isn’t just about coding. One big part of software development is communicating, not just with the computer but with people too. Similar to what I think to most developers, I do struggle with it. I find it hard dealing with the blank page and starting a document. Maybe by practicing writing my thoughts down, I would be more comfortable and less likely to procrastinate documentation. And maybe with more practice (and hopefully feedback from other people), I can improve my technical writing skills.Shitty first draftI struggle with looking at a blank page and not knowing how to start things. In the same way, I want to create good quality code. I expect a certain level of quality in my posts. But, I do know I can’t be great at the start, especially with blogging. And so, the way I will approach this is with the idea of a shitty first draft. Similar to coding, where we iterate on code and make it better as we know more. The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.  The shitty first draft will be the foundation of this blog. The posts I would write (including this one) will probably be not that great at the start (and it’s ok), and I can continue working on and improving them.Blog tech stackThis blog is generated using Jekyll and is stored in this repository.  I like that writing posts would have the same workflow as coding, where I can continue to update/improve blog posts as commits. The underlying architecture of the blog (having it hosted in git) has ease of iteration/improvement as one of its main features. Using git also allows to keep a history of the post, and diffs can be available of the past revisions.(I don’t know much about web development, and so if there are issues in the blog feel free to reach out and let me know)(I also forgot what I used to host and so I’m typing this here as a note for future angela to check Netlify)FeedbackDuring my student days, English (especially grammar) was my worst subject.   I tend to ramble a lot in writing and have trouble with rules on tenses and punctuation. When it comes to code, there’s the compiler that tells me whenever I broke some of them. When it comes to writing, I would probably read them and have a sense of whether it feels right or not. (Probably not the best way) English language aside, there’s also a lot of room for improvement in technical writing. Have I achieved my goal of communicating my ideas in a way that’s easily understood?In saying that, it would be great and a massive favor if I can get some feedback on my posts. I’m still trying to figure out if I want a comment section. So, for now, feel free to email me at: hello@aci.codes or send me a message on Twitter.I don’t know how to end this post (this can be your first point of feedback) and so see you later on my next post, I guess :)"
    } 
  
]
